#+title: Empirical Analysis Results: DFS vs BFS
#+author: Andrei Chicu
#+OPTIONS: title:t toc:t

* Experimental Methodology and Statistical Considerations

** Repetitions and Variability
For each graph type and size, algorithms were executed with 5 repetitions to account for system variability and provide statistical robustness. This approach allows us to:

- Calculate mean execution times for more reliable performance comparison
- Determine standard deviation to assess result consistency and reliability
- Identify potential outliers or anomalous behavior in specific test cases

The error bars in the plots represent the standard deviation across these repetitions, providing a visual indication of measurement variability. Larger error bars indicate higher variance in execution times, which could be attributed to:

- System scheduling fluctuations
- Memory allocation differences between runs
- Background processes affecting performance
- Cache effects and memory access patterns

In some cases (particularly the acyclic graph tests), the standard deviation appears quite large relative to the mean values, suggesting a higher degree of variability in those specific scenarios. This variability should be considered when interpreting the results.

* Performance Analysis by Graph Type

** Complete Graph
- Both algorithms show a clear polynomial growth pattern as the graph size increases, consistent with their O(V+E) complexity where E = O(V²) for complete graphs.
- DFS consistently demonstrates higher execution times compared to BFS, with the gap widening as graph size increases. At 2500 vertices, DFS takes approximately 0.43 seconds while BFS requires around 0.30 seconds.
- The performance difference is likely due to the recursive implementation of DFS versus the iterative implementation of BFS, which incurs additional function call overhead.
- Standard deviation is relatively small for both algorithms, indicating consistent performance across repetitions.

** Dense Graph
- In dense graphs (approximately 80% of maximum possible edges), both algorithms show nearly identical performance profiles.
- The execution time growth is polynomial, matching the theoretical expectation for graphs where E ≈ O(V²).
- Unlike in complete graphs, the performance difference between DFS and BFS is minimal, suggesting that the overhead of recursion in DFS is offset by other factors in dense but not complete graphs.
- The execution times reach approximately 0.5 seconds at 2500 vertices for both algorithms.
- Low standard deviation values indicate high consistency in measurement.

** Sparse Graph
- For sparse graphs (with approximately 2|V| edges), both algorithms exhibit a more linear growth pattern, consistent with their theoretical O(V+E) complexity where E = O(V).
- DFS consistently performs worse than BFS across all graph sizes, with the gap becoming more pronounced as the graph size increases.
- At 10,000 vertices, DFS requires approximately 0.014 seconds while BFS takes around 0.011 seconds.
- The standard deviation is relatively higher compared to other graph types, particularly for larger graph sizes, indicating some variability in performance measurements.
- The performance advantage of BFS may be attributed to its level-by-level exploration, which could be more efficient in sparse graphs where most paths are relatively long.

** Tree Graph
- Tree graphs show the most unusual performance pattern among all tested graph types.
- The execution times are extremely small (in the order of 10⁻⁵ seconds) even for large graphs with up to 10,000 vertices.
- There is no clear trend in performance as graph size increases, with some larger graphs actually showing faster execution times than smaller ones.
- The standard deviation is proportionally very large, often comparable to or exceeding the mean execution time.
- The unusual behavior might be attributed to:
  - Highly efficient traversal of tree structures
  - Caching effects becoming significant at these small time scales
  - System timing resolution limitations at microsecond scales
- The negative values on the y-axis are likely visualization artifacts due to error bars extending below zero.

** Connected Graph
- Both algorithms show a linear growth pattern, consistent with O(V+E) complexity when E is proportional to V.
- DFS performs slightly worse than BFS at larger graph sizes, but the difference is minimal compared to other graph types.
- At 10,000 vertices, DFS takes approximately 0.011 seconds while BFS requires around 0.009 seconds.
- The standard deviation increases with graph size but remains relatively consistent between the two algorithms.
- The minimal performance difference suggests that both algorithms are well-suited for connected graphs with moderate edge density.

** Cyclic Graph
- Both algorithms show a linear growth pattern up to 2000 vertices, after which BFS maintains linear growth while DFS begins to exhibit slightly faster growth.
- At 2500 vertices, DFS takes approximately 0.0027 seconds while BFS requires around 0.0015 seconds.
- BFS appears to handle cycles more efficiently than DFS, possibly because it avoids the deep recursion that can occur when DFS encounters cycles.
- The standard deviation is moderate and increases with graph size, indicating reasonable measurement consistency.

** Acyclic Graph
- The acyclic graph tests show the most erratic behavior among all graph types, with significant fluctuations in execution time across different graph sizes.
- Despite the fluctuations, there is a general upward trend in execution time as graph size increases.
- BFS generally outperforms DFS, particularly at larger graph sizes.
- The error bars are exceptionally large, indicating high variability across repetitions.
- The erratic behavior might be attributed to:
  - Specific topological characteristics of the generated acyclic graphs
  - Memory access patterns that vary significantly between runs
  - System scheduling effects becoming more pronounced

** Grid Graph
- Grid graphs show one of the clearest performance differences between DFS and BFS.
- Both algorithms exhibit linear growth with graph size, but DFS shows a steeper slope.
- At 10,000 vertices, DFS requires approximately 0.0097 seconds while BFS takes around 0.006 seconds.
- The performance gap widens consistently as graph size increases, with BFS maintaining a roughly 40% advantage at the largest sizes.
- The standard deviation is small relative to the mean values, indicating consistent measurements.
- BFS's advantage in grid graphs is likely due to its level-by-level exploration pattern, which aligns well with the regular structure of grid graphs.

* Time Complexity Analysis

** Theoretical Complexity
Both DFS and BFS have the same theoretical time complexity:
- Worst-case time complexity: O(V + E)
  - Where V is the number of vertices and E is the number of edges
- Space complexity: 
  - DFS: O(V) for the recursion stack (or explicit stack in iterative implementation)
  - BFS: O(V) for the queue

** Empirical Observations
Our experimental results largely confirm the theoretical complexity but reveal important practical distinctions:

1. **Complete and Dense Graphs (E ≈ V²)**:
   - Both algorithms show polynomial growth (approximately quadratic)
   - Execution time predominantly determined by the number of edges
   - DFS performs worse than BFS in complete graphs but similarly in dense graphs

2. **Sparse, Connected, and Grid Graphs (E ≈ V)**:
   - Linear growth pattern observed
   - BFS consistently outperforms DFS
   - The performance gap widens with increasing graph size

3. **Special Case: Tree Graphs**:
   - Extremely efficient traversal for both algorithms
   - No clear scaling pattern with graph size
   - Execution times so small that measurement noise becomes significant

** Implementation Impact
The practical performance differences between DFS and BFS, despite identical theoretical complexity, can be attributed to:

1. **Implementation Overhead**:
   - Recursive DFS incurs function call overhead
   - Iterative BFS avoids this overhead but requires queue operations

2. **Memory Access Patterns**:
   - DFS explores deeply before backtracking, potentially leading to less efficient cache usage
   - BFS's level-by-level exploration may result in more cache-friendly memory access patterns

3. **Graph Structure Interaction**:
   - BFS performs particularly well on regular structures like grid graphs
   - DFS may perform better when solutions are likely to be found deep in the graph

* Conclusions

The empirical analysis confirms that while DFS and BFS share the same theoretical time complexity of O(V+E), their practical performance characteristics differ significantly depending on graph structure:

** Algorithm Selection Guidance
BFS is generally more efficient across most graph types, particularly for grid structures and large graphs.
The performance advantage of BFS becomes more pronounced as graph size increases.
For complete graphs and some specialized applications where depth-priority is beneficial, DFS may still be appropriate.

2. **Implementation Considerations**:
   - The recursive implementation of DFS introduces overhead that impacts real-world performance
   - An iterative implementation of DFS might reduce this gap
   - The choice between recursive and iterative implementations represents a trade-off between code clarity and performance

3. **Statistical Reliability**:
   - Most graph types show consistent performance across repetitions, as evidenced by relatively small standard deviations
   - Tree graphs and acyclic graphs show higher variability, suggesting that performance for these specific structures may be more sensitive to system conditions

4. **Scaling Behavior**:
   - Both algorithms scale according to theoretical predictions based on the relationship between vertices and edges
   - The practical growth rate is highly dependent on graph structure and edge density

These findings demonstrate the importance of empirical analysis to complement theoretical complexity analysis, as implementation details and structural characteristics can significantly impact real-world algorithm performance.
